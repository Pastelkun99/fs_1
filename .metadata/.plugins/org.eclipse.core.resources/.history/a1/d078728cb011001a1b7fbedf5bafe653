package com.fusion1.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fusion1.dao.AnalysisDAO;
import com.fusion1.dao.InfoVO;
import com.fusion1.dao.PopupVO;
import com.fusion1.dao.QuestionVO;
import com.fusion1.dao.SelectVO;
import com.fusion1.dao.UserVO;
import com.fusion1.service.AdminServiceImpl;
import com.fusion1.service.AnalysisServiceImpl;
import com.fusion1.service.UserServiceImpl;

@Controller
public class AdminController {
	
	@Autowired
	UserServiceImpl us;
	
	@Autowired
	AdminServiceImpl as;
	
	@Autowired
	AnalysisServiceImpl ans;

	@RequestMapping(value="/mng/adminCheck.do", method=RequestMethod.GET)
	public String adminCheck(HttpSession session, Model model, HttpServletRequest request) {
		try {
			int logAdmin = (int)session.getAttribute("LoginAdminPage");
			if(logAdmin == 1) {
				model.addAttribute("msg", "관리자님 환영합니다.");
				model.addAttribute("href", request.getContextPath() + "/mng/adminManagement.do?mode=user");
				return "alert";
			} else {
				return "adminCheck";
			}
		} catch (Exception e) {
			model.addAttribute("msg", "허가되지 않은 사용자는 접근할 수 없습니다.");
			model.addAttribute("href", request.getContextPath() + "/boardList.do?page_no=1&pageSize=10");
			return "alert";
		}
		
	}
	
	@RequestMapping(value="/mng/adminCheck.do", method=RequestMethod.POST)
	public String adminCheck(@RequestParam("inputPassword") String pw, Model model, HttpServletRequest request, HttpSession session) {
		
		UserVO adminCheck = us.adminCheck();
		
		String inputPW = pw;
		String adminPW = adminCheck.getUserpw();
		if(inputPW.equals(adminPW)) {
			model.addAttribute("msg", "관리자 모드 ON");
			model.addAttribute("href", request.getContextPath() + "/mng/adminManagement.do?mode=user");
			session.setAttribute("LoginAdminPage", 1);
			return "alert";
		} else  {
			model.addAttribute("msg", "비밀번호가 일치하지 않습니다.");
			model.addAttribute("href", request.getContextPath() + "/boardList.do?page_no=1&pageSize=10");
			return "alert";
		}
		
	}
	
	@RequestMapping(value="/mng/adminManagement.do", method=RequestMethod.GET)
	public String adminManagement(Model model, HttpServletRequest request, @RequestParam(defaultValue="user") String mode) {
		
		if(mode.equals("user")) {
			List<UserVO> userList = us.getUserList();
			model.addAttribute("userList", userList);
			return "adminManageUser";
			
		} else if(mode.equals("analysis")) {
			int requestNo = Integer.parseInt(request.getParameter("a_no"));
			List<InfoVO> infoList = ans.getAnalysisInfoList();
			List<SelectVO> selectList = ans.getSelectList();
			List<AnalysisDAO> questionList = ans.getAnalysisQuestionList(requestNo);
			model.addAttribute("infoList", infoList);
			model.addAttribute("selectList", selectList);
			model.addAttribute("questionList", questionList);
			return "adminManageAnalysis";
			
		} else if(mode.equals("popup")) {
			int requestPopup = Integer.parseInt(request.getParameter("pop_id"));
			System.out.println("requestpopup : " + requestPopup);
			List<PopupVO> popList = as.getPopupInfoList();
			PopupVO temp = new PopupVO();
			temp.setPop_id(requestPopup);
			PopupVO popup = as.getPopupInfo(temp);
			if(popup == null) {
				System.out.println("조건에 만족하는 팝업이 없음.");
			} else {
				System.out.println("뷰에서 부려주는 정보 : " + popup.toString());
				model.addAttribute("popupInfo", popup);
			}
			model.addAttribute("popList", popList);
			return "adminManagePopup";
			
		} else  {
			model.addAttribute("msg", "허용되지 않은 페이지 이동입니다.");
			model.addAttribute("href", request.getContextPath() + "/mng/adminManagement.do?mode=user");
			return "alert";
		}
		
	}
	
	@RequestMapping(value="/mng/userInfo.do", method=RequestMethod.GET)
	public String userInfo(@RequestParam("userid") String userid, Model model) {
		UserVO userInfo = us.getUserInfo(userid);
		model.addAttribute("userInfo", userInfo);
		return "userinfo";
	}
	
	@RequestMapping(value="/mng/userInfoUpdate.do")
	@ResponseBody
	public String updateUserInfo(UserVO userVO) {
		System.out.println(userVO.toString());
		int result = us.userInfoUpdate(userVO);
		return String.valueOf(result);
	}
	
	@RequestMapping(value="/mng/popupModify.do")
	public String popupModify(Model model, @RequestParam("pop_id") int pop_id) {
		PopupVO temp = new PopupVO();
		temp.setPop_id(pop_id);
		PopupVO popup = as.getPopupInfo(temp);
		model.addAttribute("popupInfo", popup);
		return "popupModify";
	}
	
	@RequestMapping(value="/mng/popupInsert.do", method=RequestMethod.GET)
	public String popupInsert(Model model, PopupVO popupVO) {
		return "popupInsert";
	}
	
	@RequestMapping(value="/mng/popupInsert.do", method=RequestMethod.POST)
	@ResponseBody
	public String popupInsertPost(Model model, PopupVO popupVO) {
		System.out.println("포스트로 들어온 것 : " + popupVO.toString());
		int result = as.insertPopupInfo(popupVO);
		return String.valueOf(result);
	}
	
	@RequestMapping(value="/mng/popupInfoUpdate.do")
	@ResponseBody
	public String popupInfoUpdate(PopupVO popupVO) {
		System.out.println(popupVO.toString());
		int result = as.updatePopupInfo(popupVO);
		return String.valueOf(result);
	}
	
	@RequestMapping(value="/mng/showPopup.do")
	public String showPopup(Model model) {
		PopupVO popup = as.getPopupAval();
		model.addAttribute("pop_id", popup.getPop_id());
		model.addAttribute("pop_title", popup.getPop_title());
		model.addAttribute("pop_fromdate", popup.getPop_fromdate());
		model.addAttribute("pop_todate", popup.getPop_todate());
		model.addAttribute("pop_height", popup.getPop_height());
		model.addAttribute("pop_width", popup.getPop_width());
		model.addAttribute("pop_content", popup.getPop_content());
		model.addAttribute("pop_imageurl", popup.getPop_imageurl());
		model.addAttribute("pop_url", popup.getPop_url());
		model.addAttribute("pop_aval", popup.getPop_aval());
		return "popup";
	}
	
	@RequestMapping(value="/mng/popupInfoInsert.do")
	@ResponseBody
	public String popupInfoInsert(PopupVO popupVO) {
		System.out.println(popupVO.toString());
		int result = 1;
		return String.valueOf(result);
	}
	
	@RequestMapping(value="/mng/questionInfo.do")
	public String questionInfo(Model model, @RequestParam("a_no") int a_no, @RequestParam("q_no") int q_no) {
		
		QuestionVO temp = new QuestionVO();
		temp.setA_no(a_no);
		temp.setQ_no(q_no);
		
		QuestionVO question = ans.getQuestionInfo(temp);
		List<SelectVO> selectionList = ans.getSelectionList();
		
		model.addAttribute("question", question);
		model.addAttribute("selectionList", selectionList);
		return "questionInfo";
	}
	
	@RequestMapping(value="/mng/questionUpdate.do")
	@ResponseBody
	public String questionUpdate(QuestionVO questionVO) {
		System.out.println(questionVO.toString());
		int result = ans.updateQuestion(questionVO);
		return String.valueOf(result);
	}
	
	@RequestMapping(value="/mng/questionAppend.do")
	public String questionAppend(@RequestParam("a_no") int a_no, Model model) {
		List<SelectVO> selectionList = ans.getSelectionList();
		QuestionVO count = ans.getQuestionCount(a_no);
		int cnt = count.getCnt() + 1;
		model.addAttribute("selectionList", selectionList);
		model.addAttribute("count", cnt);
		return "questionAppend";
	}
	
	@RequestMapping(value="/mng/questionAppend.do", method=RequestMethod.POST)
	@ResponseBody
	public String questionAppendForm(QuestionVO questionVO) {
		System.out.println(questionVO.toString());
		int result = ans.appendQuestion(questionVO);
		return String.valueOf(result);
	}
	
	@RequestMapping(value="/mng/questionDelete.do", method=RequestMethod.POST)
	@ResponseBody
	public String questionDelete(QuestionVO questionVO) {
		System.out.println(questionVO.toString());
		int result = ans.deleteQuestion(questionVO);
		return String.valueOf(result);
	}
}
