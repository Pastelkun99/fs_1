package com.fusion1.controller;

import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Base64.Decoder;
import java.util.Base64.Encoder;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.fusion1.dao.ArticleVO;
import com.fusion1.dao.BoardVO;
import com.fusion1.dao.IndividualVO;
import com.fusion1.dao.MenuVO;
import com.fusion1.dao.MultiBoardVO;
import com.fusion1.dao.PagenationVO;
import com.fusion1.dao.ReadNoticeVO;
import com.fusion1.dao.ReplyVO;
import com.fusion1.dao.TraceVO;
import com.fusion1.dao.UserVO;
import com.fusion1.service.AdminServiceImpl;
import com.fusion1.service.BoardServiceImpl;
import com.fusion1.service.IndividualServiceImpl;
import com.fusion1.service.MultiBoardServiceImpl;
import com.fusion1.service.ReplyServiceImpl;
import com.fusion1.service.UserServiceImpl;
import com.nhncorp.lucy.security.xss.XssPreventer;

@Controller
public class MultiBoardController {
	
	@Autowired
	BoardServiceImpl bs;
	
	@Autowired
	MultiBoardServiceImpl ms;
	
	@Autowired
	AdminServiceImpl as;
	
	@Autowired
	UserServiceImpl us;
	
	// 댓글 처리 관련
	@Autowired
	ReplyServiceImpl rs;
	
	@RequestMapping(value="/multi/exit.do")
	public String exit() {
		return "multi/exit";
	}
	
	@RequestMapping(value="/multi/boardMain.do")
	public String multiBoardMainPage(Model model, HttpSession session) {
		
		String currentId = (String)session.getAttribute("userid");
		
		List<MultiBoardVO> multiList = as.getMultiBoardList();
		model.addAttribute("boardList", multiList);
		
		MultiBoardVO thisMultiBoard = new MultiBoardVO();
		thisMultiBoard.setUser_id(currentId);
		
		ReadNoticeVO info = new ReadNoticeVO();
		info.setUser_id(currentId);
		ArticleVO cntOnly = ms.nonReadNoticeArticle(info);
		model.addAttribute("nonReadCount", cntOnly.getCnt());
		
		List<ArticleVO> nonReadList = ms.getNonReadNoticeList(thisMultiBoard);
		model.addAttribute("nonReadList", nonReadList);
		
		List<MenuVO> menuList = as.getMenuList();
		model.addAttribute("menuList", menuList);
		
		return "multi/boardMain";
	}

	// 신 게시판의 리스트를 불러온다.
	@RequestMapping(value="/multi/boardList.do")
	public String multiBoard(Model model, 
							 @RequestParam("board_no") int board_no, 
							 PagenationVO pageSetting, 
							 HttpSession session) {
		
		String currentId = (String)session.getAttribute("userid");
		
		List<MultiBoardVO> multiList = as.getMultiBoardList();
		model.addAttribute("boardList", multiList);
		
		// 게시판이 존재하지 않는 경우에 대한 예외처리(null)
		MultiBoardVO thisMultiBoard = new MultiBoardVO();
		thisMultiBoard.setBoard_no(board_no);
		thisMultiBoard = as.getMultiBoardOne(thisMultiBoard);
		if(thisMultiBoard == null || thisMultiBoard.equals(null)) {
			model.addAttribute("msg", "해당 게시판은 존재하지 않습니다.");
			model.addAttribute("href", "/multi/boardMain.do");
			return "alert";
		}
		
		// 검색어 및 검색 조건 미지정 상태
		if(pageSetting.getKeyword() == null || pageSetting.getKeyword().equals("")) {
			
			thisMultiBoard.setBoard_no(board_no);
			thisMultiBoard.setUser_id(currentId);
			
			// 해당 게시판의 설정 정보를 불러온다.
			thisMultiBoard = as.getMultiBoardOne(thisMultiBoard);
			model.addAttribute("boardConfig", thisMultiBoard);
			
			// 해당 아이디의 알림글 읽음 여부
			ReadNoticeVO info = new ReadNoticeVO();
			info.setUser_id(currentId);
			ArticleVO cntOnlyVO = ms.nonReadNoticeArticle(info);
			model.addAttribute("nonReadCount", cntOnlyVO.getCnt());
			
			cntOnlyVO = ms.nonReadNoticeArticleThisBoard(thisMultiBoard);
			model.addAttribute("nonReadCountThisBoard", cntOnlyVO.getCnt());
			
			// 해당 게시판의 게시글 총 갯수
			cntOnlyVO = ms.getArticleCountByBoardNo(thisMultiBoard);
			int totalCount = cntOnlyVO.getCnt();
			int pageSize = pageSetting.getPageSize();
			int page_no = pageSetting.getPage_no();
			int endPage = totalCount / pageSize;
			if (totalCount % pageSize > 0) {
				endPage++;
			}
			
			
			// 페이지네이션 구축
			PagenationVO pageVO = new PagenationVO();
			pageVO.setStartPage(1);
			pageVO.setEndPage(endPage);
			pageVO.setPageList(pageSize);
			pageVO.setPageSize(pageSize);
			pageVO.setTotalCount(totalCount);
			pageVO.setPageCon((page_no*pageSize) - pageSize);
			pageVO.setPageBoardNo((page_no*pageSize));
			pageVO.setBoard_no(board_no);
			model.addAttribute("page", pageVO);

			List<ArticleVO> articleList = ms.getArticleListByBoardNo2(pageVO);
			model.addAttribute("articleList", articleList);
			
			List<ArticleVO> noticeList = ms.getNoticeArticleList();
			model.addAttribute("noticeList", noticeList);
			
			List<MenuVO> menuList = as.getMenuList();
			model.addAttribute("menuList", menuList);
			
			return "multi/boardList";
			
		} else  {
			// 검색어 존재
			
			thisMultiBoard.setBoard_no(board_no);
			
			thisMultiBoard = as.getMultiBoardOne(thisMultiBoard);
			model.addAttribute("boardConfig", thisMultiBoard);
			
			ReadNoticeVO info = new ReadNoticeVO();
			info.setUser_id(currentId);
			ArticleVO cntOnlyVO  = ms.nonReadNoticeArticle(info);
			model.addAttribute("nonReadCount", cntOnlyVO.getCnt());
			
			cntOnlyVO = ms.nonReadNoticeArticleThisBoard(thisMultiBoard);
			model.addAttribute("nonReadCountThisBoard", cntOnlyVO.getCnt());
			
			ArticleVO articleInfo = ms.getArticleSearchCount(pageSetting);
			int totalCount = articleInfo.getCnt(); 
			int getPageSize = pageSetting.getPageSize();
			int getPage_no = pageSetting.getPage_no();
			int searchCon = pageSetting.getSearchCon();
			int endPage = totalCount / getPageSize;
			if(totalCount % getPageSize > 0) {
				endPage++;
			}
			
			String keyword = pageSetting.getKeyword();
			
			PagenationVO pageSearchVO = new PagenationVO();
			pageSearchVO.setStartPage(1);
			pageSearchVO.setEndPage(endPage);
			pageSearchVO.setPageList(pageSetting.getPageSize());
			pageSearchVO.setPageSize(getPageSize);
			pageSearchVO.setBoard_no(board_no);
			
			// 페이지 검색 조건과 검색어, 해당 조건에 맞는 게시글 수를 지정.
			pageSearchVO.setSearchCon(searchCon);
			pageSearchVO.setKeyword(keyword);
			pageSearchVO.setTotalCount(totalCount);
			
			int pageCon = (getPage_no*getPageSize) - getPageSize;
			pageSearchVO.setPageCon(pageCon);
			
			List<ArticleVO> articleList = ms.getArticleSearchList(pageSearchVO);
			model.addAttribute("articleList", articleList);
			
			List<MenuVO> menuList = as.getMenuList();
			model.addAttribute("menuList", menuList);
			
			model.addAttribute("page", pageSearchVO);
			
			return "multi/boardList";
		}
	}
	
	// 게시글 보기
	@RequestMapping(value="/multi/board.do", method=RequestMethod.GET)
	public String board(@RequestParam("board_no") int board_no, 
						@RequestParam("article_no") int article_no,
						/*@RequestParam(value="decoded", required=false) String decode,*/
						@ModelAttribute("decoded") String decoded,
						Model model, 
						HttpServletRequest request,
						HttpSession session) 
	{
		
		// 비밀글 처리가 되었는지 확인한다.
		// 이전 비밀글 체크 메서드에서 비밀번호가 체크되어 다시 확인할 필요가 없는 경우, 1이 넘어오도록 설계되었다.
		if(decoded == null || decoded.equals("")) {
			decoded = "0";
		}
		
		String currentID = (String)session.getAttribute("userid");
		
		MultiBoardVO thisBoard = new MultiBoardVO();
		thisBoard.setBoard_no(board_no);
		thisBoard = as.getMultiBoardOne(thisBoard);
		model.addAttribute("boardConfig", thisBoard);
		
		// 해당 글 읽음 처리
		ReadNoticeVO read = new ReadNoticeVO();
		read.setArticle_no(article_no);
		read.setUser_id(currentID);
		ms.writeNoticeInfo(read);
		
		
		ArticleVO article = ms.getArticleOne(article_no);
		// 삭제된 글을 불러온 경우 경고페이지 return
		if(article.getArticle_deleteyn().equals("Y") || article.getArticle_deleteyn() == "Y") {
			model.addAttribute("msg", "삭제된 글입니다.");
			return "multi/exit";
		}
		
		String convertedContents = article.getArticle_content();
		convertedContents = XssPreventer.unescape(convertedContents);
		article.setArticle_content(convertedContents);
		
		// 비밀글에 대한 분기
		if(article.getArticle_secretyn().equals("Y")) {
			
			// 이미 비밀번호 확인이 완료된 경우
			if(decoded.equals("1")) {
				MultiBoardVO thisBoardChecked = new MultiBoardVO();
				thisBoard.setBoard_no(board_no);
				
				thisBoard = as.getMultiBoardOne(thisBoardChecked);
				model.addAttribute("boardConfig", thisBoard);
				
				ArticleVO articleChecked = ms.getArticleOne(article_no);
				
				String convertedContentsChecked = articleChecked.getArticle_content();
				convertedContents = XssPreventer.unescape(convertedContentsChecked);
				article.setArticle_content(convertedContents);
				
				ms.articleHitUpdate(article_no);
				
				model.addAttribute("article", article);
				return "/multi/articleRead";
			}
			
			// 암호화 해제 로직
			String encodedPassword = article.getArticle_password();
			byte[] encodedByte = encodedPassword.getBytes();
			
			Decoder decoder = Base64.getDecoder();
			byte[] decodeByteArray = decoder.decode(encodedByte);
			String decodedPassword = new String(decodeByteArray);
			article.setArticle_password(decodedPassword);
			
			model.addAttribute("article", article);
			model.addAttribute("OrderedUrl", request.getRequestURI());
			UserVO userInfo = us.getUserInfo(currentID);
			model.addAttribute("userInfo", userInfo);
			
			return "/multi/ownerCheck";
		}
		
		// 조회수 up
		ms.articleHitUpdate(article_no);
		
		model.addAttribute("article", article);
		
		return "/multi/articleRead";
	}
	
	
	// 비밀글 암호 체크 및 redirect.
	@RequestMapping(value="/multi/ownerCheck.do", method=RequestMethod.POST)
	public String ownerCheckPost(@RequestParam("inputPassword") String inputPassword, 
								 @RequestParam("article_no") int articleNo, 
								 @RequestParam("OrderedUrl") String url, 
								 Model model, 
								 HttpServletRequest request,
								 RedirectAttributes rttr,
								 HttpSession session) 
	{
		
		ArticleVO article = ms.getArticleOne(articleNo);
		int board_no = article.getBoard_no();
		
		// 암호화된 비밀번호를 decrypt
		String encodedPassword = article.getArticle_password();
		byte[] encodedByteArray = encodedPassword.getBytes();
		
		Decoder decoder = Base64.getDecoder();
		byte[] decodeByteArray = decoder.decode(encodedByteArray);
		String decodedPassword = new String(decodeByteArray);
		
		
		if(inputPassword.equals(decodedPassword)) {
			
			// 해당 작업이 상세보기일 경우
			if(url.indexOf("board") != -1) {
				model.addAttribute("article", article);
				/*rttr.addAttribute("decoded", "1");*/
				rttr.addFlashAttribute("decoded", "1");
				return "redirect:/multi/board.do?board_no=" + board_no + "&article_no=" + articleNo; 
			}
			
			// 해당 작업이 글 수정일 경우
			if(url.indexOf("Edit") != -1) {
				model.addAttribute("article_no", articleNo);
				return "redirect:/multi/articleEdit.do?board_no=" + board_no + "&article_no=" + articleNo;
			}
			
			// 해당 작업이 글 삭제일 경우
			if(url.indexOf("Delete") != -1) {
				request.setAttribute("delete_aval", 1);
				return "redirect:/multi/articleDelete.do?board_no=" + board_no + "&article_no=" + articleNo;
			}
			
			model.addAttribute("article", article);
			return "/multi/readArticle";
			
		} else {
			model.addAttribute("msg", "비밀번호가 다릅니다.");
			return "/multi/exit";
		}
	}
	
	
	// 글쓰기 form 호출
	@RequestMapping(value="/multi/articleWrite.do", method=RequestMethod.GET)
	public String articleWrite(HttpSession session, Model model, @RequestParam("board_no") int board_no) {
		
		MultiBoardVO thisMultiBoardVO = new MultiBoardVO();
		thisMultiBoardVO.setBoard_no(board_no);
		thisMultiBoardVO = as.getMultiBoardOne(thisMultiBoardVO);
		if(thisMultiBoardVO == null || thisMultiBoardVO.equals(null)) {
			model.addAttribute("msg", "해당 게시판은 존재하지 않습니다.");
			model.addAttribute("href", "/multi/boardMain.do");
			return "alert";
		}
		
		thisMultiBoardVO = as.getMultiBoardOne(thisMultiBoardVO);
		model.addAttribute("boardConfig", thisMultiBoardVO);
		
		// 게시글 작성 일자 표시를 위해 전달 (다른 방법 있음)
		SimpleDateFormat formatter = new SimpleDateFormat ("yyyy.MM.dd HH:mm:ss", Locale.KOREA);
		Date currentTime = new Date();
		String date = formatter.format(currentTime);
		model.addAttribute("date", date);
		
		return "/multi/articleWrite";
	}
	
	
	// 글쓰기 작업
	@RequestMapping(value="/multi/articleWrite.do", method=RequestMethod.POST)
	@ResponseBody
	@Transactional(rollbackFor={Exception.class})
	public String articleWritePost(ArticleVO article, 
								   HttpSession session) 
	{
		
		String currentId = (String)session.getAttribute("userid");
		
		if(article.getArticle_secretyn() == null || article.getArticle_secretyn().equals("")) {
			article.setArticle_secretyn("N");
		}
		
		if(article.getArticle_secretyn().equals("Y") || article.getArticle_secretyn() == "Y") {
			String articlePassword = article.getArticle_password();
			byte[] passwordToByteArray = articlePassword.getBytes();
			Encoder encoder = Base64.getEncoder();
			byte[] encodedBytes = encoder.encode(passwordToByteArray);
			article.setArticle_password(new String(encodedBytes));
		}
		
		// 글 내용 태그 삭제
		String noTagContent = article.getArticle_content();
		noTagContent = XssPreventer.unescape(noTagContent);
		article.setArticle_content(noTagContent);
		int result = ms.articleInsert(article);
		
		// 글쓰기에 성공한 경우 로그 001을 삽입
		if(result == 1) {
			Map<String, Object> traceMap = new HashMap<String, Object>();
			traceMap.put("traceCode", "001");
			traceMap.put("traceUser", currentId);
			ms.insertTraceLog(traceMap);
		}
		
		// 답글관련 넘버링을 위해 자신의 글 번호와 parentsno를 일치
		ArticleVO temp = ms.getPreventInsertedArticle();
		int parent_no = temp.getArticle_no();
		ms.articleParentsnoUpdate(parent_no);
		
		return String.valueOf(result);
	}
	
	
	// 글삭제 권한 체크
	@RequestMapping(value="/multi/articleDeleteCheck.do")
	public String articleDeleteCheck(HttpSession session,
									 @RequestParam("board_no") int board_no, 
									 @RequestParam("article_no") int article_no, 
									 Model model, 
									 HttpServletRequest request) 
	{
		
		String currentID = (String)session.getAttribute("userid");
		
		ArticleVO article = ms.getArticleOne(article_no);
		if(article.getArticle_secretyn().equals("Y") || article.getArticle_secretyn() == "Y") {
			
			// 비밀글 처리
			String encoded = article.getArticle_password();
			byte[] encodedByte = encoded.getBytes();
			
			Decoder decoder = Base64.getDecoder();
			byte[] decodeByte = decoder.decode(encodedByte);
			String decoded = new String(decodeByte);
			article.setArticle_password(decoded);
			
			model.addAttribute("article", article);
			model.addAttribute("OrderedUrl", request.getRequestURI());
			UserVO userInfo = us.getUserInfo(currentID);
			model.addAttribute("userInfo", userInfo);
			return "/multi/ownerCheck";
		} else {
			return "redirect:/multi/articleDelete.do?board_no=" + board_no + "&article_no=" + article_no;
		}
		
	}
	
	
	// 글 삭제 로직
	@RequestMapping(value="/multi/articleDelete.do", method=RequestMethod.POST)
	@ResponseBody
	public String deleteBoardOne(Model model, HttpSession session, HttpServletRequest request, ArticleVO articleVO) {

		String currentUserId = (String)session.getAttribute("userid");
		int result = ms.articleDelete(articleVO);
		
		// 삭제의 경우 003 로그를 삽입
		Map<String, Object> traceMap = new HashMap<String, Object>();
		traceMap.put("traceCode", "003");
		traceMap.put("traceUser", currentUserId);
		ms.insertTraceLog(traceMap);
		
		return String.valueOf(result);
	}
	
	
	// 글 수정 권한 체크
	@RequestMapping(value="/multi/articleEditCheck.do")
	public String articleEditCheck(HttpSession session, @RequestParam("board_no") int board_no, @RequestParam("article_no") int article_no, Model model, HttpServletRequest request) {
		
		String currentID = (String)session.getAttribute("userid");
		ArticleVO article = ms.getArticleOne(article_no);
		if(article.getArticle_secretyn().equals("Y") || article.getArticle_secretyn() == "Y") {
			
			//비밀글 처리
			String encoded = article.getArticle_password();
			byte[] encodedByte = encoded.getBytes();
			
			Decoder decoder = Base64.getDecoder();
			byte[] decodeByte = decoder.decode(encodedByte);
			//System.out.println("디코딩된 것 : " + new String(decodeByte));
			String decoded = new String(decodeByte);
			article.setArticle_password(decoded);
			
			model.addAttribute("article", article);
			model.addAttribute("OrderedUrl", request.getRequestURI());
			
			UserVO userInfo = us.getUserInfo(currentID);
			model.addAttribute("userInfo", userInfo);
			return "/multi/ownerCheck";
			
		} else {
			return "redirect:/multi/articleEdit.do?board_no=" + board_no + "&article_no=" + article_no;
		}
	}
	
	// 글 수정 폼 호출
	@RequestMapping(value="/multi/articleEdit.do", method=RequestMethod.GET)
	public String updateBoardOne(@RequestParam("board_no") int board_no, 
								 @RequestParam("article_no") int article_no, 
								 Model model, 
								 HttpSession session, 
								 HttpServletRequest request) 
	{
		String currentUser = (String)session.getAttribute("userid");
		ArticleVO article = ms.getArticleOne(article_no);
		
		if(currentUser == null || currentUser.equals("")) {
			model.addAttribute("msg", "권한이 없습니다.");
			model.addAttribute("href", request.getContextPath() + "/multi/board.do?board_no=" + request.getParameter("board_no") + "&article_no=" + article.getBoard_no());
			return "alert";
		} else if(currentUser.equals("admin")) {
			model.addAttribute("article", article);
			return "/multi/articleEdit";
		} else if(currentUser.equals(article.getArticle_userid())) {
			model.addAttribute("article", article);
			return "/multi/articleEdit";
		} else {
			model.addAttribute("msg", "권한이 없습니다.");
			model.addAttribute("href", request.getContextPath() + "/multi/board.do?board_no=" + request.getParameter("board_no") + "&article_no=" + article.getBoard_no());
			return "alert";
		}
		
	}
	
	// 실제 글 수정 로직
	@ResponseBody
	@RequestMapping(value="/multi/articleEdit.do", method=RequestMethod.POST)
	public String updateBoardOne(ArticleVO article, 
								 Model model, 
								 HttpSession session, 
								 HttpServletRequest request) 
	{
		String currentUser = (String)session.getAttribute("userid");
		
		if(currentUser == null || currentUser.equals("")) {
			model.addAttribute("msg", "권한이 없습니다.");
			model.addAttribute("href", request.getContextPath() + "/multi/board.do?board_no=" + request.getParameter("board_no") + "&article_no=" + article.getBoard_no());
			return "alert";
		} else if(currentUser.equals("admin")) {
			int result = ms.articleUpdate(article);
			
			// 글 수정은 002 로그 삽입
			Map<String, Object> traceMap = new HashMap<String, Object>();
			traceMap.put("traceCode", "002");
			traceMap.put("traceUser", currentUser);
			ms.insertTraceLog(traceMap);
			
			return String.valueOf(result);
		} else if(currentUser.equals(article.getArticle_userid())) {
			int result = ms.articleUpdate(article);
			
			Map<String, Object> traceMap = new HashMap<String, Object>();
			traceMap.put("traceCode", "002");
			traceMap.put("traceUser", currentUser);
			ms.insertTraceLog(traceMap);
			return String.valueOf(result);
		} else {
			
			model.addAttribute("msg", "권한이 없습니다.");
			model.addAttribute("href", request.getContextPath() + "/multi/board.do?board_no=" + request.getParameter("board_no") + "&article_no=" + article.getBoard_no());
			return "alert";
		}
	}
	
	
	// 게시판 답글 form 호출
	@RequestMapping(value="/multi/reArticleWrite.do", method=RequestMethod.GET)
	public String reBoardWrite(@RequestParam("board_no") int board_no, 
							   @RequestParam("article_no") int article_no, 
							   Model model, 
							   HttpSession session) 
	{
		String currentUser = (String)session.getAttribute("userid");
		
		MultiBoardVO temp = new MultiBoardVO();
		temp.setBoard_no(board_no);
		temp.setUser_id(currentUser);
		
		MultiBoardVO config = as.getMultiBoardOne(temp);
		model.addAttribute("boardConfig", config);
		
		ArticleVO articleVO = ms.getArticleOne(article_no);
		SimpleDateFormat formatter = new SimpleDateFormat ("yyyy.MM.dd HH:mm:ss", Locale.KOREA);
		Date currentTime = new Date();
		String date = formatter.format(currentTime);
		
		model.addAttribute("date", date);
		model.addAttribute("article", articleVO);
		return "/multi/reArticle";
	}
	
	
	// 게시판 답글 작성
	@RequestMapping(value="/multi/reArticleWrite.do", method=RequestMethod.POST)
	@ResponseBody
	public String reBoardWritePost(ArticleVO articleVO) {
		
		articleVO.setArticle_grouporder(articleVO.getArticle_grouporder() + 1);
		articleVO.setArticle_groupdepth(articleVO.getArticle_groupdepth() + 1);
		
		// 답글을 달고자 하는 글의 정보를 불러온다. 
		ArticleVO parentsVO = ms.getArticleOne(articleVO.getArticle_no());
		
		// 답글을 달고자 하는 글과 해당 글의 상위 글의 grouporder를 +1하는 쿼리를 실행한다.
		ms.reWriteGroupOrder(parentsVO);
		
		if(articleVO.getArticle_secretyn() == null || articleVO.getArticle_secretyn().equals("")) {
			articleVO.setArticle_secretyn("N");
		}
		
		if(articleVO.getArticle_secretyn().equals("Y") || articleVO.getArticle_secretyn() == "Y") {
			String articlePassword = articleVO.getArticle_password();
			byte[] passwordToByte = articlePassword.getBytes();
			Encoder encoder = Base64.getEncoder();
			byte[] encodedBytes = encoder.encode(passwordToByte);
			articleVO.setArticle_password(new String(encodedBytes));
		}
		
		// 이후 답글을 등록한다.
		int result = ms.reArticleInsert(articleVO);
		return String.valueOf(result);
	}
	
	@Autowired
	IndividualServiceImpl ism;
	
	@RequestMapping(value="/multi/individualInfo.do")
	public String individualInfo(HttpSession session, Model model) {
		
		String currentUserId = (String)session.getAttribute("userid");
		
		Map<String, Object> infoMap = new HashMap<String, Object>();
		infoMap.put("trace_user", currentUserId);
		
		TraceVO traveUserInfo = ism.getCount(infoMap);
		model.addAttribute("traceInfo", traveUserInfo);
		
		// 새로운 객체 생성
		UserVO userVO = new UserVO();
		userVO.setUserid(currentUserId);
		List<IndividualVO> indiList = us.getUserIndividualInfoList(userVO);
		
		Iterator<IndividualVO> indiListIt = indiList.iterator();
		while(indiListIt.hasNext()) {
			IndividualVO info = indiListIt.next();
			String tag = info.getArticle_content();
			tag = tag.replaceAll("img", "");
			tag = tag.replaceAll("<p>", "");
			tag = tag.replaceAll("</p>", "");
			String nor = XssPreventer.unescape(tag);
			info.setArticle_content(nor);
		}
		
		List<MultiBoardVO> multiList = as.getMultiBoardList();
		
		model.addAttribute("multiList", multiList);
		model.addAttribute("indiList", indiList);
		
		return "/multi/individualInfo";
	}
	
	
	@RequestMapping(value="/multi/individualInfoBoardChange.do", method=RequestMethod.POST)
	public String changeBoardAjax(@RequestParam int board_no, HttpSession session, Model model) {
		/*System.out.println("받아들인 board_no : " + board_no);
		System.out.println("접속 중인 ID : " + (String)session.getAttribute("userid"));*/
		Map<String, Object> infomap = new HashMap<String, Object>();
		infomap.put("userid", (String)session.getAttribute("userid"));
		infomap.put("board_no", board_no);
		
		Map<String, Object> infoMap = new HashMap<String, Object>();
		infoMap.put("trace_user", (String)session.getAttribute("userid"));
		
		TraceVO traveUserInfo = ism.getCount(infoMap);
		model.addAttribute("traceInfo", traveUserInfo);
		
		List<IndividualVO> indiList =  us.getUserIndividualInfoListByBoardNo(infomap);
		model.addAttribute("indiList", indiList);
		return "/multi/indiList";
	}
	
	
	@RequestMapping(value="/multi/articleReadModal.do")
	public String articleReadModal(ArticleVO articleVO, Model model) {
		try {
			ArticleVO article = ms.getArticleOne(articleVO.getArticle_no());
			model.addAttribute("article", article);
			
			List<ReplyVO> reply_list = rs.getReplyList2(articleVO.getArticle_no());
			model.addAttribute("reply_list", reply_list);
			
			MultiBoardVO temtp = new MultiBoardVO();
			temtp.setBoard_no(articleVO.getBoard_no());
			MultiBoardVO multiBoardVO = as.getMultiBoardOne(temtp);
			model.addAttribute("boardConfig", multiBoardVO);
			
		} catch (Exception e) {
			
		}
		return "/multi/articleReadModal";
		
	}
	

	
	// 댓글 작성 프로세스
	@RequestMapping(value="/multi/writeReplyAction")
	@ResponseBody
	public String writeReplyAction(@ModelAttribute ReplyVO reply, HttpSession session) {
		
		String currentUser = (String)session.getAttribute("userid");
		
		// 현재 날짜 정보
		SimpleDateFormat formatter = new SimpleDateFormat ("yyyy.MM.dd HH:mm:ss", Locale.KOREA);
		Date currentTime = new Date();
		String date = formatter.format(currentTime);
		reply.setReply_date(date);
		
		int result = rs.replyWrite(reply);
		
		// 댓글 작성의 경우 004 로그를 삽입
		Map<String, Object> traceMap = new HashMap<String, Object>();
		traceMap.put("traceCode", "004");
		traceMap.put("traceUser", currentUser);
		ms.insertTraceLog(traceMap);
		
		return String.valueOf(result);
	}
	
	
	// 댓글 리스트 불러오기
	@RequestMapping(value="/multi/getReplyList", method=RequestMethod.GET)
	@ResponseBody
	public List<ReplyVO> getReplyList(@ModelAttribute ReplyVO reply) {
		reply.setOrderType("new");
		List<ReplyVO> reply_list = rs.getReplyList(reply);
		if(reply_list.size() == 1 && reply_list.get(0).getReply_writer() == null) {
			return null;
		}
		return reply_list;
	}
	
	
	// 최신순 리스트 불러오기
	@RequestMapping(value="/multi/getReplyListNew", method=RequestMethod.POST)
	@ResponseBody
	public List<ReplyVO> getReplyListNew(ReplyVO replyVO) {
		System.out.println(replyVO.toString());
		replyVO.setOrderType("new");
		List<ReplyVO> result = rs.getReplyList(replyVO);
		if(result == null) {
			return null;
		}
		return result;
	}
	
	
	// 등록순 리스트 불러오기
	@RequestMapping(value="/multi/getReplyListOld", method=RequestMethod.POST)
	@ResponseBody
	public List<ReplyVO> getReplyListOld(ReplyVO replyVO) {
		System.out.println(replyVO.toString());
		replyVO.setOrderType("old");
		List<ReplyVO> result = rs.getReplyList(replyVO);
		return result;
	}
	
	
	// 점수순 리스트 불러오기
	@RequestMapping(value="/multi/getReplyListScore", method=RequestMethod.POST)
	@ResponseBody
	public List<ReplyVO> getReplyListScore(ReplyVO replyVO) {
		System.out.println(replyVO.toString());
		replyVO.setOrderType("score");
		List<ReplyVO> result = rs.getReplyList(replyVO);
		return result;
	}
	
	
	// 댓글 삭제
	@RequestMapping(value="/multi/deleteReply", produces="application/text; charset=utf8")
	@ResponseBody
	public String deleteReply(@ModelAttribute ReplyVO reply, HttpServletRequest request, HttpSession session) {
		System.out.println(reply.toString());
		String currentUserid = (String)session.getAttribute("userid");
		System.out.println(currentUserid);
		int thisReplyNo = reply.getReply_no();
		ReplyVO thisReplyVO = rs.getReplyOneByNo(thisReplyNo);
		
		int queryValue = 0;
		if(thisReplyVO.getReply_userid() == null) {
			return "해당 댓글은 존재하지 않습니다.";
		} else  {
			queryValue = rs.deleteReply(thisReplyVO);
		}
		
		if(queryValue == 1) {
			String result = "success";
			return result;
		} else {
			String result = "fail";
			return result;
		}
	}

	
	// 댓글 수정 확인
	@RequestMapping(value="/multi/updateReplyConfirm", method=RequestMethod.POST)
	@ResponseBody
	public String updateReplyConfirm(@ModelAttribute ReplyVO reply, HttpServletRequest request) {
		int result = rs.updateReplyConfirm(reply);
		return String.valueOf(result);
	}
	
	// 대댓글 쓰기
	@RequestMapping(value="/multi/reReplyWriteAction", method=RequestMethod.GET)
	public String reReplyWriteAction(@ModelAttribute ReplyVO reply, HttpServletRequest request, Model model) {
		System.out.println(reply.toString());
		ReplyVO thisReply = rs.getReplyOneByNo(reply.getReply_no());
		model.addAttribute("thisReply", thisReply);
		return "/multi/reReplyAction";
	}
	
	// 대댓글 쓰기
	@RequestMapping(value="/multi/reReplyWriteAction", method=RequestMethod.POST)
	@ResponseBody
	public String reReplyWriteActionPost(ReplyVO replyVO) {
		System.out.println("포스트 : " + replyVO.toString());
		int result = rs.reReplyWriteAction(replyVO);
		return String.valueOf(result);
	}
	
	@RequestMapping(value="/multi/replyLikeAndHate", method=RequestMethod.POST)
	@ResponseBody
	public ReplyVO replyListAndHate(ReplyVO replyVO) {
		System.out.println(replyVO.toString());
		
		ReplyVO likeInfo = rs.replyLikeAndHateConfirm(replyVO);
		if(likeInfo.getCnt() == 0) {
			// 정보가 없는 경우 신규 등록
			rs.replyLikeAndHateAction(replyVO);
			rs.replyLikeAndHateScoreAdjust(replyVO);
			return new ReplyVO();
		} else {
			// db에 있는 값이 Y인 경우.
			if(likeInfo.getOrderType().equals("Y")) {
				// 여기서 replyVO의 ordertype이 Y인 경우, 좋아요 했는데 또 좋아요를 하려는 경우고, n인 경우 싫어요로 바꾸려는 것.
				if(replyVO.getOrderType().equals("Y")) {
					// 에러 처리
					ReplyVO resultVO = new ReplyVO();
					resultVO.setOrderType("Y");
					return resultVO;
				} else {
					// 그대로 처리. 점수와 로그를 교체한다.
					rs.replyLikeAndHateLogAdjust(replyVO);
					rs.replyLikeAndHateScoreAdjust2(replyVO);
					replyVO.setOrderType("N");
					return replyVO;
				}
			} else {
				// db에 있는 값이 N인 경우.
				// 여기서 replyVO의 ordertype이 N인 경우, 싫어요 했는데 또 싫어요를 하려는 경우고, Y인 경우 좋아요로 바꾸려는 것.
				if(replyVO.getOrderType().equals("N")) {
					ReplyVO resultVO = new ReplyVO();
					resultVO.setOrderType("Y");
					return resultVO;
				} else {
					// 누른 값이 Y인 경우, 좋아요로 교체 한다.
					rs.replyLikeAndHateLogAdjust(replyVO);
					rs.replyLikeAndHateScoreAdjust2(replyVO);
					replyVO.setOrderType("N");
					return replyVO;
				}
			}
		}
	}
	
	
}
