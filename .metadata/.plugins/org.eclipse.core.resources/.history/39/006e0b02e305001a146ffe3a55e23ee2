package com.fusion1.controller;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.support.RequestPartServletServerHttpRequest;

import com.fusion1.dao.BoardVO;
import com.fusion1.dao.PagenationVO;
import com.fusion1.service.BoardServiceImpl;


@Controller
public class BoardController {
	
	@Autowired
	BoardServiceImpl bs;
	
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(HttpSession session, HttpServletRequest request, Model model) {
		String currentUser = (String)session.getAttribute("userid");
		if(currentUser == null || currentUser.equals("")) {
			return "home";
		} else {
			model.addAttribute("msg", "이미 로그인 되어 있습니다.");
			model.addAttribute("href", "/boardList.do?page_no=1&pageSize=10");
			return "alert";
		}
		
	}
	
	@RequestMapping(value="/boardList.do")
	public String boardList(HttpSession session, Model model, PagenationVO page) {
		String currentID = (String)session.getAttribute("userid");
//		System.out.println(page.toString());
		if(currentID == null || currentID.equals("")) {
			model.addAttribute("msg", "로그인 후 이용할 수 있는 서비스 입니다.");
			model.addAttribute("href", "/");
			return "alert";
		} else {
			if(page.getKeyword() == null || page.getKeyword().equals("")) {
				int totalCount = bs.getBoardCount();
				int getPageSize = page.getPageSize();
				int getPage_no = page.getPage_no();
				int endPage = totalCount / getPageSize;
				
				/*System.out.println("불러온 게시글 수 : " + totalCount);
				System.out.println("불러온 페이지 사이즈 : " + getPageSize);
				System.out.println("끝 페이지가 될 녀석 (+1 하기 전)" + endPage);*/
				
				if(totalCount % getPageSize > 0) {
					endPage++;
				}
				
				System.out.println("endPage 최종 : " + endPage);
				PagenationVO pageVO = new PagenationVO();
				pageVO.setStartPage(1);
				pageVO.setEndPage(endPage);
				pageVO.setPageList(page.getPageSize());
				pageVO.setPageSize(getPageSize);
				
				// page_no = 1 일때 0, 2일때 10, 3일때 20 ...
				int pageCon = (getPage_no*getPageSize) - getPageSize;
				pageVO.setPageCon(pageCon);
				//System.out.println(pageCon);
				
				List<BoardVO> list = bs.getBoardList(pageVO);
				
				List<BoardVO> noticeList = bs.getBoardNotice(1);
				
				if(!noticeList.isEmpty()) {
					BoardVO notice = noticeList.get(0);
					model.addAttribute("notice", notice);
				}
				
				model.addAttribute("boardlist", list);
				model.addAttribute("noticeList", noticeList);
				model.addAttribute("page", pageVO);
				return "boardList";
			} else {
				//System.out.println(page.toString());
				int totalCount = bs.getBoardSearchCount(page);
				int getPageSize = page.getPageSize();
				int getPage_no = page.getPage_no();
				int searchCon = page.getSearchCon();
				int endPage = totalCount / getPageSize;
				String keyword = page.getKeyword();
				
				if(totalCount % page.getPageSize() > 0) {
					endPage++;
				}
				
				PagenationVO pageSearch = new PagenationVO();
				pageSearch.setStartPage(1);
				pageSearch.setEndPage(endPage);
				pageSearch.setPageList(page.getPageSize());
				pageSearch.setPageSize(getPageSize);
				pageSearch.setSearchCon(searchCon);
				pageSearch.setKeyword(keyword);
				
				int pageCon = (getPage_no*getPageSize) - getPageSize;
				pageSearch.setPageCon(pageCon);
				
				List<BoardVO> list = bs.getBoardSearchList(pageSearch);
				
				List<BoardVO> noticeList = bs.getBoardNotice(1);
				if(!noticeList.isEmpty()) {
					BoardVO notice = noticeList.get(0);
					model.addAttribute("notice", notice);
				}
				model.addAttribute("boardlist", list);
				model.addAttribute("noticeList", noticeList);
				model.addAttribute("page", pageSearch);
				return "boardList";
			}
		}
	}
	
	@RequestMapping(value="/board.do", method=RequestMethod.GET)
	public String board(HttpSession session, @RequestParam("board_no") int board_no, Model model) {
		String currentID = (String)session.getAttribute("userid");
		
		if(currentID == null || currentID.equals("")) {
			model.addAttribute("msg", "로그인 후 이용할 수 있는 서비스 입니다.");
			model.addAttribute("href", "/");
			return "alert";
		} else {
			int totalcount = bs.getBoardCount();
			BoardVO boardvo = bs.getBoardOne(board_no);
			String convertedContents = boardvo.getBoard_content().replaceAll("\n", "</br>");
			boardvo.setBoard_content(convertedContents);
			bs.updateBoardHit(board_no);
			model.addAttribute("board", boardvo);
			model.addAttribute("totalCnt", totalcount);
			return "board";
		}
	}
	
	@RequestMapping(value="/boardWrite.do", method=RequestMethod.GET)
	public String boardWrite(Model model, HttpSession session) {
		String currentUser = (String)session.getAttribute("userid");
		if(currentUser == null || currentUser.equals("")) {
			model.addAttribute("msg", "로그인 후 이용할 수 있는 서비스 입니다.");
			model.addAttribute("href", "/");
			return "alert";
		} else {
			SimpleDateFormat formatter = new SimpleDateFormat ("yyyy.MM.dd HH:mm:ss", Locale.KOREA);
			Date currentTime = new Date();
			String date = formatter.format(currentTime);
			model.addAttribute("date", date);
			return "boardw";
		}
		
	}
	
	@RequestMapping(value="/boardWrite.do", method=RequestMethod.POST)
	@ResponseBody
	public String boardWrite(BoardVO boardVO) {
		int result = bs.insertBoardOne(boardVO);
		int parents_no = boardVO.getBoard_no();
		int result2 = bs.updateBoardParent(parents_no);
		return String.valueOf(result);
	}
	
	
	@RequestMapping(value="/boardedit.do", method=RequestMethod.GET)
	public String updateBoardOne(@RequestParam("board_no") int board_no, Model model, HttpSession session, HttpServletRequest request) {
		String currentUser = (String)session.getAttribute("userid");
		BoardVO board = bs.getBoardOne(board_no);
		if(currentUser == null || currentUser.equals("")) {
			model.addAttribute("msg", "권한이 없습니다.");
			model.addAttribute("href", request.getContextPath() + "/board.do?board_no=" + board_no);
			return "alert";
		} else if(currentUser.equals("admin")) {
			model.addAttribute("board", board);
			return "boarde";
		} else if(currentUser.equals(board.getBoard_userid())) {
			model.addAttribute("board", board);
			return "boarde";
		} else {
			model.addAttribute("msg", "권한이 없습니다.");
			model.addAttribute("href", request.getContextPath() + "/board.do?board_no=" + board_no);
			return "alert";
		}
	}

	@ResponseBody
	@RequestMapping(value="/boardedit.do", method=RequestMethod.POST)
	public String updateBoardOne(BoardVO board, Model model, HttpSession session, HttpServletRequest request) {
		String currentUser = (String)session.getAttribute("userid");
		//System.out.println(board.toString());
		if(currentUser == null || currentUser.equals("")) {
			model.addAttribute("msg", "권한이 없습니다.");
			model.addAttribute("href", request.getContextPath() + "/board.do?board_no=" + board.getBoard_no());
			return "alert";
		} else if(currentUser.equals("admin")) {
			int result = bs.updateBoardOne(board);
			return String.valueOf(result);
		} else if(currentUser.equals(board.getBoard_userid())) {
			int result = bs.updateBoardOne(board);
			return String.valueOf(result);
		} else {
			model.addAttribute("msg", "권한이 없습니다.");
			model.addAttribute("href", request.getContextPath() + "/board.do?board_no=" + board.getBoard_no());
			return "alert";
		}
		
	}
	
	@ResponseBody
	@RequestMapping(value="/boardDelete.do", method=RequestMethod.GET)
	public String deleteBoardOne(BoardVO board, Model model, HttpSession session, HttpServletRequest request) {
		String currentUser = (String)session.getAttribute("userid");
		//System.out.println("접속중인 유저 : " + currentUser + " 게시글을 쓴 유저" + board.getBoard_userid());
		if(currentUser == null || currentUser.equals("")) {
			model.addAttribute("msg", "권한이 없습니다.");
			model.addAttribute("href", request.getContextPath() + "/board.do?board_no=" + board.getBoard_no());
			return "alert";
		} else if(currentUser.equals("admin")) {
			int result = bs.deleteBoardOne(board);
			return String.valueOf(result);
		} else if(currentUser.equals(board.getBoard_userid())) {
			int result = bs.deleteBoardOne(board);
			return String.valueOf(result);
		} else {
			model.addAttribute("msg", "권한이 없습니다.");
			model.addAttribute("href", request.getContextPath() + "/board.do?board_no=" + board.getBoard_no());
			return "alert";
		}
	}
	
	@RequestMapping(value="/reBoardWrite.do", method=RequestMethod.GET)
	public String reBoardWrite(@RequestParam("board_no") int board_no, Model model, HttpSession session) {
		String currentUser = (String)session.getAttribute("userid");
		
		if(currentUser == null || currentUser.equals("")) {
			model.addAttribute("msg", "로그인 후 이용할 수 있는 서비스 입니다.");
			model.addAttribute("href", "/");
			return "alert";
		} else {
			BoardVO boardVO = bs.getBoardOne(board_no);
//			System.out.println("답글을 달 원글이 되는 번호 : " + boardVO.getBoard_parentsno());
//			System.out.println(boardVO.toString());
			SimpleDateFormat formatter = new SimpleDateFormat ("yyyy.MM.dd HH:mm:ss", Locale.KOREA);
			Date currentTime = new Date();
			String date = formatter.format(currentTime);
			model.addAttribute("date", date);
			model.addAttribute("board", boardVO);
			return "reBoard";
			
		}
	}
	
	@RequestMapping(value="/reBoardWrite.do", method=RequestMethod.POST)
	@ResponseBody
	public String reBoardWrite(BoardVO boardVO) {
		
//		System.out.println("폼에서 작성된 게시글 양식 : " + boardVO.toString());
		BoardVO parentsVO = bs.getBoardOne(boardVO.getBoard_parentsno());
//		System.out.println("parentsVO의 양식 : " + parentsVO.toString());
		
		// 현재 쓰고자 하는 글의 groupnumber와, groupdepth가 필요함.
		
		boardVO.setBoard_grouporder(boardVO.getBoard_grouporder() + 1);
		boardVO.setBoard_groupdepth(boardVO.getBoard_groupdepth() + 1);
		
		BoardVO parentsVO2 = bs.getBoardOne(boardVO.getBoard_no());
//		System.out.println("새로 불러온 부모 글의 정보  : " + parentsVO2.toString());
		
		int result2 = bs.reWriteGroupOrder(parentsVO2);
		int result = bs.reWriteBoard(boardVO);
		 
		return String.valueOf(result);
	}
	
}
